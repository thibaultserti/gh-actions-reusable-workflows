name: go-quality
on:
  workflow_call:
    inputs:
      go-version:
        default: "['1.20']"
        required: false
        type: string
      golangci-lint-version:
        default: "v1.51.2"
        required: false
        type: string
      goreleaser-version:
        default: "v1.16.1"
        required: false
        type: string
      enable-codeclimate:
        default: false
        required: false
        type: boolean
      enable-codecov:
        default: false
        required: false
        type: boolean
      enable-codeql:
        default: false
        required: false
        type: boolean

jobs:
  quality:
    name: 🍰 Check Golang quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ${{ fromJson(inputs.go-version) }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: ⚙️ Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          
      - name: 🔑 Load conf/secrets in tests
        run: cp -v $GITHUB_WORKSPACE/test/* test/

      - name: ℹ Go fmt
        run: go fmt ./...

      - name: 📊 Go vet
        run: go vet ./...

      - name: ✔ Go lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ inputs.golangci-lint-version }}
          skip-pkg-cache: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🛠 Go tests
        run: go test -v ./test

      - name: 🏗️ Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: ${{ inputs.goreleaser-version }}
          args: build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ☀️ Codeclimate
        if: ${{ inputs.enable-codeclimate }}
        uses: paambaati/codeclimate-action@v3.2.0 #forced to use full version
        with:
          coverageCommand: go test -v -race -vet off -covermode atomic -coverprofile coverage.gocov ./test/... -coverpkg=./...
          coverageLocations: ${{github.workspace}}/coverage.gocov:gocov
          prefix: ${{ github.event.repository.name }}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODECLIMATE_TEST_REPORTER_ID }}

      - name: 🍀 Codecov
        uses: codecov/codecov-action@v3
        if: ${{ inputs.enable-codecov }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.gocov
          flags: unittests
          fail_ci_if_error: true
          verbose: true

  security:
    name: 🔐 Check Golang security
    needs: [quality]
    if: ${{ inputs.enable-codeql }}
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: ⚙️ Set up Go
        uses: actions/setup-go@v3

      - name: ⚙️ Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: "go"

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 📈 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
